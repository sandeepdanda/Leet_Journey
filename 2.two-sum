Question:

Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]


Solution:

class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        self.nums = nums
        self.target = target
        for i in range(len(nums)):
            for j in range(i+1,len(nums)):
                if target == nums[i] + nums[j]:
                    return [i,j]
        pass

Efficient Solution : (using dictionary )

class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        self.nums = nums
        self.target = target
        nums_dict = {}
        for i,num in enumerate(nums):      #
            complement = target - num
            if complement in nums_dict:
                return [nums_dict[complement],i]
            nums_dict[num] = i
        return []   

#Note : By using enumerate(nums), the loop iterates over the elements of nums and assigns each element to num and its index to i. 
This allows us to conveniently store the numbers and their indices in the num_dict dictionary.
